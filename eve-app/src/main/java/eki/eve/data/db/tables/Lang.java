/*
 * This file is generated by jOOQ.
*/
package eki.eve.data.db.tables;


import eki.eve.data.db.Indexes;
import eki.eve.data.db.Keys;
import eki.eve.data.db.Public;
import eki.eve.data.db.tables.records.LangRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Lang extends TableImpl<LangRecord> {

    private static final long serialVersionUID = 1369869892;

    /**
     * The reference instance of <code>public.lang</code>
     */
    public static final Lang LANG = new Lang();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LangRecord> getRecordType() {
        return LangRecord.class;
    }

    /**
     * The column <code>public.lang.code</code>.
     */
    public final TableField<LangRecord, String> CODE = createField("code", org.jooq.impl.SQLDataType.CHAR(3).nullable(false), this, "");

    /**
     * The column <code>public.lang.value</code>.
     */
    public final TableField<LangRecord, String> VALUE = createField("value", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * Create a <code>public.lang</code> table reference
     */
    public Lang() {
        this(DSL.name("lang"), null);
    }

    /**
     * Create an aliased <code>public.lang</code> table reference
     */
    public Lang(String alias) {
        this(DSL.name(alias), LANG);
    }

    /**
     * Create an aliased <code>public.lang</code> table reference
     */
    public Lang(Name alias) {
        this(alias, LANG);
    }

    private Lang(Name alias, Table<LangRecord> aliased) {
        this(alias, aliased, null);
    }

    private Lang(Name alias, Table<LangRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.LANG_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<LangRecord> getPrimaryKey() {
        return Keys.LANG_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<LangRecord>> getKeys() {
        return Arrays.<UniqueKey<LangRecord>>asList(Keys.LANG_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Lang as(String alias) {
        return new Lang(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Lang as(Name alias) {
        return new Lang(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Lang rename(String name) {
        return new Lang(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Lang rename(Name name) {
        return new Lang(name, null);
    }
}
