/*
 * This file is generated by jOOQ.
*/
package eki.eve.data.db.tables;


import eki.eve.data.db.Keys;
import eki.eve.data.db.Public;
import eki.eve.data.db.tables.records.DefinitionRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Definition extends TableImpl<DefinitionRecord> {

    private static final long serialVersionUID = -1945624322;

    /**
     * The reference instance of <code>public.definition</code>
     */
    public static final Definition DEFINITION = new Definition();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DefinitionRecord> getRecordType() {
        return DefinitionRecord.class;
    }

    /**
     * The column <code>public.definition.id</code>.
     */
    public final TableField<DefinitionRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('definition_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.definition.meaning_id</code>.
     */
    public final TableField<DefinitionRecord, Long> MEANING_ID = createField("meaning_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.definition.value</code>.
     */
    public final TableField<DefinitionRecord, String> VALUE = createField("value", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.definition.lang</code>.
     */
    public final TableField<DefinitionRecord, String> LANG = createField("lang", org.jooq.impl.SQLDataType.CHAR.length(3).nullable(false), this, "");

    /**
     * The column <code>public.definition.datasets</code>.
     */
    public final TableField<DefinitionRecord, String[]> DATASETS = createField("datasets", org.jooq.impl.SQLDataType.VARCHAR.getArrayDataType(), this, "");

    /**
     * Create a <code>public.definition</code> table reference
     */
    public Definition() {
        this("definition", null);
    }

    /**
     * Create an aliased <code>public.definition</code> table reference
     */
    public Definition(String alias) {
        this(alias, DEFINITION);
    }

    private Definition(String alias, Table<DefinitionRecord> aliased) {
        this(alias, aliased, null);
    }

    private Definition(String alias, Table<DefinitionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<DefinitionRecord, Long> getIdentity() {
        return Keys.IDENTITY_DEFINITION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DefinitionRecord> getPrimaryKey() {
        return Keys.DEFINITION_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DefinitionRecord>> getKeys() {
        return Arrays.<UniqueKey<DefinitionRecord>>asList(Keys.DEFINITION_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<DefinitionRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<DefinitionRecord, ?>>asList(Keys.DEFINITION__DEFINITION_MEANING_ID_FKEY, Keys.DEFINITION__DEFINITION_LANG_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Definition as(String alias) {
        return new Definition(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Definition rename(String name) {
        return new Definition(name, null);
    }
}
