/*
 * This file is generated by jOOQ.
*/
package eki.eve.data.db.tables;


import eki.eve.data.db.Keys;
import eki.eve.data.db.Public;
import eki.eve.data.db.tables.records.LexemeDomainRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LexemeDomain extends TableImpl<LexemeDomainRecord> {

    private static final long serialVersionUID = -707811730;

    /**
     * The reference instance of <code>public.lexeme_domain</code>
     */
    public static final LexemeDomain LEXEME_DOMAIN = new LexemeDomain();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LexemeDomainRecord> getRecordType() {
        return LexemeDomainRecord.class;
    }

    /**
     * The column <code>public.lexeme_domain.id</code>.
     */
    public final TableField<LexemeDomainRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('lexeme_domain_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.lexeme_domain.lexeme_id</code>.
     */
    public final TableField<LexemeDomainRecord, Long> LEXEME_ID = createField("lexeme_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.lexeme_domain.domain_code</code>.
     */
    public final TableField<LexemeDomainRecord, String> DOMAIN_CODE = createField("domain_code", org.jooq.impl.SQLDataType.VARCHAR.length(100).nullable(false), this, "");

    /**
     * The column <code>public.lexeme_domain.domain_origin</code>.
     */
    public final TableField<LexemeDomainRecord, String> DOMAIN_ORIGIN = createField("domain_origin", org.jooq.impl.SQLDataType.VARCHAR.length(100).nullable(false), this, "");

    /**
     * Create a <code>public.lexeme_domain</code> table reference
     */
    public LexemeDomain() {
        this("lexeme_domain", null);
    }

    /**
     * Create an aliased <code>public.lexeme_domain</code> table reference
     */
    public LexemeDomain(String alias) {
        this(alias, LEXEME_DOMAIN);
    }

    private LexemeDomain(String alias, Table<LexemeDomainRecord> aliased) {
        this(alias, aliased, null);
    }

    private LexemeDomain(String alias, Table<LexemeDomainRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<LexemeDomainRecord, Long> getIdentity() {
        return Keys.IDENTITY_LEXEME_DOMAIN;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<LexemeDomainRecord> getPrimaryKey() {
        return Keys.LEXEME_DOMAIN_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<LexemeDomainRecord>> getKeys() {
        return Arrays.<UniqueKey<LexemeDomainRecord>>asList(Keys.LEXEME_DOMAIN_PKEY, Keys.LEXEME_DOMAIN_LEXEME_ID_DOMAIN_CODE_DOMAIN_ORIGIN_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<LexemeDomainRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<LexemeDomainRecord, ?>>asList(Keys.LEXEME_DOMAIN__LEXEME_DOMAIN_LEXEME_ID_FKEY, Keys.LEXEME_DOMAIN__LEXEME_DOMAIN_DOMAIN_CODE_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LexemeDomain as(String alias) {
        return new LexemeDomain(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public LexemeDomain rename(String name) {
        return new LexemeDomain(name, null);
    }
}
