/*
 * This file is generated by jOOQ.
*/
package eki.ekilex.data.db.tables;


import eki.ekilex.data.db.Indexes;
import eki.ekilex.data.db.Keys;
import eki.ekilex.data.db.Public;
import eki.ekilex.data.db.tables.records.LexemeRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Lexeme extends TableImpl<LexemeRecord> {

    private static final long serialVersionUID = 1967076496;

    /**
     * The reference instance of <code>public.lexeme</code>
     */
    public static final Lexeme LEXEME = new Lexeme();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LexemeRecord> getRecordType() {
        return LexemeRecord.class;
    }

    /**
     * The column <code>public.lexeme.id</code>.
     */
    public final TableField<LexemeRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('lexeme_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.lexeme.word_id</code>.
     */
    public final TableField<LexemeRecord, Long> WORD_ID = createField("word_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.lexeme.meaning_id</code>.
     */
    public final TableField<LexemeRecord, Long> MEANING_ID = createField("meaning_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.lexeme.type</code>.
     */
    public final TableField<LexemeRecord, String> TYPE = createField("type", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.lexeme.level1</code>.
     */
    public final TableField<LexemeRecord, Integer> LEVEL1 = createField("level1", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.lexeme.level2</code>.
     */
    public final TableField<LexemeRecord, Integer> LEVEL2 = createField("level2", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.lexeme.level3</code>.
     */
    public final TableField<LexemeRecord, Integer> LEVEL3 = createField("level3", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * Create a <code>public.lexeme</code> table reference
     */
    public Lexeme() {
        this(DSL.name("lexeme"), null);
    }

    /**
     * Create an aliased <code>public.lexeme</code> table reference
     */
    public Lexeme(String alias) {
        this(DSL.name(alias), LEXEME);
    }

    /**
     * Create an aliased <code>public.lexeme</code> table reference
     */
    public Lexeme(Name alias) {
        this(alias, LEXEME);
    }

    private Lexeme(Name alias, Table<LexemeRecord> aliased) {
        this(alias, aliased, null);
    }

    private Lexeme(Name alias, Table<LexemeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.LEXEME_MEANING_ID_IDX, Indexes.LEXEME_PKEY, Indexes.LEXEME_WORD_ID_IDX, Indexes.LEXEME_WORD_ID_MEANING_ID_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<LexemeRecord, Long> getIdentity() {
        return Keys.IDENTITY_LEXEME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<LexemeRecord> getPrimaryKey() {
        return Keys.LEXEME_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<LexemeRecord>> getKeys() {
        return Arrays.<UniqueKey<LexemeRecord>>asList(Keys.LEXEME_PKEY, Keys.LEXEME_WORD_ID_MEANING_ID_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<LexemeRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<LexemeRecord, ?>>asList(Keys.LEXEME__LEXEME_WORD_ID_FKEY, Keys.LEXEME__LEXEME_MEANING_ID_FKEY, Keys.LEXEME__LEXEME_TYPE_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Lexeme as(String alias) {
        return new Lexeme(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Lexeme as(Name alias) {
        return new Lexeme(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Lexeme rename(String name) {
        return new Lexeme(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Lexeme rename(Name name) {
        return new Lexeme(name, null);
    }
}
