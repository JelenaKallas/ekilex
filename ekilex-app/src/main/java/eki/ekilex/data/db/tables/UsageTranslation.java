/*
 * This file is generated by jOOQ.
*/
package eki.ekilex.data.db.tables;


import eki.ekilex.data.db.Indexes;
import eki.ekilex.data.db.Keys;
import eki.ekilex.data.db.Public;
import eki.ekilex.data.db.tables.records.UsageTranslationRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UsageTranslation extends TableImpl<UsageTranslationRecord> {

    private static final long serialVersionUID = -2106603211;

    /**
     * The reference instance of <code>public.usage_translation</code>
     */
    public static final UsageTranslation USAGE_TRANSLATION = new UsageTranslation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UsageTranslationRecord> getRecordType() {
        return UsageTranslationRecord.class;
    }

    /**
     * The column <code>public.usage_translation.id</code>.
     */
    public final TableField<UsageTranslationRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('usage_translation_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.usage_translation.usage_id</code>.
     */
    public final TableField<UsageTranslationRecord, Long> USAGE_ID = createField("usage_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.usage_translation.value</code>.
     */
    public final TableField<UsageTranslationRecord, String> VALUE = createField("value", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.usage_translation.lang</code>.
     */
    public final TableField<UsageTranslationRecord, String> LANG = createField("lang", org.jooq.impl.SQLDataType.CHAR(3).nullable(false), this, "");

    /**
     * Create a <code>public.usage_translation</code> table reference
     */
    public UsageTranslation() {
        this(DSL.name("usage_translation"), null);
    }

    /**
     * Create an aliased <code>public.usage_translation</code> table reference
     */
    public UsageTranslation(String alias) {
        this(DSL.name(alias), USAGE_TRANSLATION);
    }

    /**
     * Create an aliased <code>public.usage_translation</code> table reference
     */
    public UsageTranslation(Name alias) {
        this(alias, USAGE_TRANSLATION);
    }

    private UsageTranslation(Name alias, Table<UsageTranslationRecord> aliased) {
        this(alias, aliased, null);
    }

    private UsageTranslation(Name alias, Table<UsageTranslationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.USAGE_TRANSLATION_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<UsageTranslationRecord, Long> getIdentity() {
        return Keys.IDENTITY_USAGE_TRANSLATION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<UsageTranslationRecord> getPrimaryKey() {
        return Keys.USAGE_TRANSLATION_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<UsageTranslationRecord>> getKeys() {
        return Arrays.<UniqueKey<UsageTranslationRecord>>asList(Keys.USAGE_TRANSLATION_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<UsageTranslationRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<UsageTranslationRecord, ?>>asList(Keys.USAGE_TRANSLATION__USAGE_TRANSLATION_USAGE_ID_FKEY, Keys.USAGE_TRANSLATION__USAGE_TRANSLATION_LANG_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UsageTranslation as(String alias) {
        return new UsageTranslation(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UsageTranslation as(Name alias) {
        return new UsageTranslation(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UsageTranslation rename(String name) {
        return new UsageTranslation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UsageTranslation rename(Name name) {
        return new UsageTranslation(name, null);
    }
}
