/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.tables;


import eki.ekilex.data.db.Indexes;
import eki.ekilex.data.db.Keys;
import eki.ekilex.data.db.Public;
import eki.ekilex.data.db.tables.records.GameNonwordRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GameNonword extends TableImpl<GameNonwordRecord> {

    private static final long serialVersionUID = 903596825;

    /**
     * The reference instance of <code>public.game_nonword</code>
     */
    public static final GameNonword GAME_NONWORD = new GameNonword();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GameNonwordRecord> getRecordType() {
        return GameNonwordRecord.class;
    }

    /**
     * The column <code>public.game_nonword.id</code>.
     */
    public final TableField<GameNonwordRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('game_nonword_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.game_nonword.word</code>.
     */
    public final TableField<GameNonwordRecord, String> WORD = createField("word", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.game_nonword.lang</code>.
     */
    public final TableField<GameNonwordRecord, String> LANG = createField("lang", org.jooq.impl.SQLDataType.CHAR(3).nullable(false), this, "");

    /**
     * Create a <code>public.game_nonword</code> table reference
     */
    public GameNonword() {
        this(DSL.name("game_nonword"), null);
    }

    /**
     * Create an aliased <code>public.game_nonword</code> table reference
     */
    public GameNonword(String alias) {
        this(DSL.name(alias), GAME_NONWORD);
    }

    /**
     * Create an aliased <code>public.game_nonword</code> table reference
     */
    public GameNonword(Name alias) {
        this(alias, GAME_NONWORD);
    }

    private GameNonword(Name alias, Table<GameNonwordRecord> aliased) {
        this(alias, aliased, null);
    }

    private GameNonword(Name alias, Table<GameNonwordRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> GameNonword(Table<O> child, ForeignKey<O, GameNonwordRecord> key) {
        super(child, key, GAME_NONWORD);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.GAME_NONWORD_PKEY, Indexes.GAME_NONWORD_WORD_LANG_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<GameNonwordRecord, Long> getIdentity() {
        return Keys.IDENTITY_GAME_NONWORD;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<GameNonwordRecord> getPrimaryKey() {
        return Keys.GAME_NONWORD_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<GameNonwordRecord>> getKeys() {
        return Arrays.<UniqueKey<GameNonwordRecord>>asList(Keys.GAME_NONWORD_PKEY, Keys.GAME_NONWORD_WORD_LANG_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<GameNonwordRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<GameNonwordRecord, ?>>asList(Keys.GAME_NONWORD__GAME_NONWORD_LANG_FKEY);
    }

    public Lang lang() {
        return new Lang(this, Keys.GAME_NONWORD__GAME_NONWORD_LANG_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public GameNonword as(String alias) {
        return new GameNonword(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public GameNonword as(Name alias) {
        return new GameNonword(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public GameNonword rename(String name) {
        return new GameNonword(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public GameNonword rename(Name name) {
        return new GameNonword(name, null);
    }
}
