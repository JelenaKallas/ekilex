/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.tables;


import eki.ekilex.data.db.Indexes;
import eki.ekilex.data.db.Keys;
import eki.ekilex.data.db.Public;
import eki.ekilex.data.db.tables.records.AspectTypeRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AspectType extends TableImpl<AspectTypeRecord> {

    private static final long serialVersionUID = -576693561;

    /**
     * The reference instance of <code>public.aspect_type</code>
     */
    public static final AspectType ASPECT_TYPE = new AspectType();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AspectTypeRecord> getRecordType() {
        return AspectTypeRecord.class;
    }

    /**
     * The column <code>public.aspect_type.code</code>.
     */
    public final TableField<AspectTypeRecord, String> CODE = createField("code", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.aspect_type.datasets</code>.
     */
    public final TableField<AspectTypeRecord, String[]> DATASETS = createField("datasets", org.jooq.impl.SQLDataType.VARCHAR(10).getArrayDataType(), this, "");

    /**
     * The column <code>public.aspect_type.order_by</code>.
     */
    public final TableField<AspectTypeRecord, Long> ORDER_BY = createField("order_by", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('aspect_type_order_by_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * Create a <code>public.aspect_type</code> table reference
     */
    public AspectType() {
        this(DSL.name("aspect_type"), null);
    }

    /**
     * Create an aliased <code>public.aspect_type</code> table reference
     */
    public AspectType(String alias) {
        this(DSL.name(alias), ASPECT_TYPE);
    }

    /**
     * Create an aliased <code>public.aspect_type</code> table reference
     */
    public AspectType(Name alias) {
        this(alias, ASPECT_TYPE);
    }

    private AspectType(Name alias, Table<AspectTypeRecord> aliased) {
        this(alias, aliased, null);
    }

    private AspectType(Name alias, Table<AspectTypeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> AspectType(Table<O> child, ForeignKey<O, AspectTypeRecord> key) {
        super(child, key, ASPECT_TYPE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ASPECT_TYPE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<AspectTypeRecord, Long> getIdentity() {
        return Keys.IDENTITY_ASPECT_TYPE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AspectTypeRecord> getPrimaryKey() {
        return Keys.ASPECT_TYPE_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AspectTypeRecord>> getKeys() {
        return Arrays.<UniqueKey<AspectTypeRecord>>asList(Keys.ASPECT_TYPE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AspectType as(String alias) {
        return new AspectType(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AspectType as(Name alias) {
        return new AspectType(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AspectType rename(String name) {
        return new AspectType(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AspectType rename(Name name) {
        return new AspectType(name, null);
    }
}
