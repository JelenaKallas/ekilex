/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.udt;


import eki.ekilex.data.db.Public;
import eki.ekilex.data.db.udt.records.TypeGrammarRecord;

import javax.annotation.Generated;

import org.jooq.Schema;
import org.jooq.UDTField;
import org.jooq.impl.DSL;
import org.jooq.impl.SchemaImpl;
import org.jooq.impl.UDTImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TypeGrammar extends UDTImpl<TypeGrammarRecord> {

    private static final long serialVersionUID = 808323965;

    /**
     * The reference instance of <code>public.type_grammar</code>
     */
    public static final TypeGrammar TYPE_GRAMMAR = new TypeGrammar();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TypeGrammarRecord> getRecordType() {
        return TypeGrammarRecord.class;
    }

    /**
     * The attribute <code>public.type_grammar.value</code>.
     */
    public static final UDTField<TypeGrammarRecord, String> VALUE = createField("value", org.jooq.impl.SQLDataType.CLOB, TYPE_GRAMMAR, "");

    /**
     * The attribute <code>public.type_grammar.complexity</code>.
     */
    public static final UDTField<TypeGrammarRecord, String> COMPLEXITY = createField("complexity", org.jooq.impl.SQLDataType.VARCHAR(100), TYPE_GRAMMAR, "");

    /**
     * No further instances allowed
     */
    private TypeGrammar() {
        super("type_grammar", null, null, false);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC != null ? Public.PUBLIC : new SchemaImpl(DSL.name("public"));
    }
}
