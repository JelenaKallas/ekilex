/*
 * This file is generated by jOOQ.
*/
package eki.ekilex.data.db.udt;


import eki.ekilex.data.db.Public;
import eki.ekilex.data.db.udt.records.TypeCollocWordRecord;

import javax.annotation.Generated;

import org.jooq.Schema;
import org.jooq.UDTField;
import org.jooq.impl.UDTImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TypeCollocWord extends UDTImpl<TypeCollocWordRecord> {

    private static final long serialVersionUID = -1879050976;

    /**
     * The reference instance of <code>public.type_colloc_word</code>
     */
    public static final TypeCollocWord TYPE_COLLOC_WORD = new TypeCollocWord();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TypeCollocWordRecord> getRecordType() {
        return TypeCollocWordRecord.class;
    }

    /**
     * The attribute <code>public.type_colloc_word.word_id</code>.
     */
    public static final UDTField<TypeCollocWordRecord, Long> WORD_ID = createField("word_id", org.jooq.impl.SQLDataType.BIGINT, TYPE_COLLOC_WORD, "");

    /**
     * The attribute <code>public.type_colloc_word.word</code>.
     */
    public static final UDTField<TypeCollocWordRecord, String> WORD = createField("word", org.jooq.impl.SQLDataType.CLOB, TYPE_COLLOC_WORD, "");

    /**
     * No further instances allowed
     */
    private TypeCollocWord() {
        super("type_colloc_word", null, null, false);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }
}
