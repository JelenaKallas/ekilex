/*
 * This file is generated by jOOQ.
*/
package eki.ekilex.data.db.tables;


import eki.ekilex.data.db.Indexes;
import eki.ekilex.data.db.Keys;
import eki.ekilex.data.db.Public;
import eki.ekilex.data.db.tables.records.EntryClassRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EntryClass extends TableImpl<EntryClassRecord> {

    private static final long serialVersionUID = 1097307312;

    /**
     * The reference instance of <code>public.entry_class</code>
     */
    public static final EntryClass ENTRY_CLASS = new EntryClass();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EntryClassRecord> getRecordType() {
        return EntryClassRecord.class;
    }

    /**
     * The column <code>public.entry_class.code</code>.
     */
    public final TableField<EntryClassRecord, String> CODE = createField("code", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.entry_class.datasets</code>.
     */
    public final TableField<EntryClassRecord, String[]> DATASETS = createField("datasets", org.jooq.impl.SQLDataType.VARCHAR.getArrayDataType(), this, "");

    /**
     * Create a <code>public.entry_class</code> table reference
     */
    public EntryClass() {
        this(DSL.name("entry_class"), null);
    }

    /**
     * Create an aliased <code>public.entry_class</code> table reference
     */
    public EntryClass(String alias) {
        this(DSL.name(alias), ENTRY_CLASS);
    }

    /**
     * Create an aliased <code>public.entry_class</code> table reference
     */
    public EntryClass(Name alias) {
        this(alias, ENTRY_CLASS);
    }

    private EntryClass(Name alias, Table<EntryClassRecord> aliased) {
        this(alias, aliased, null);
    }

    private EntryClass(Name alias, Table<EntryClassRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ENTRY_CLASS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<EntryClassRecord> getPrimaryKey() {
        return Keys.ENTRY_CLASS_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<EntryClassRecord>> getKeys() {
        return Arrays.<UniqueKey<EntryClassRecord>>asList(Keys.ENTRY_CLASS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EntryClass as(String alias) {
        return new EntryClass(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EntryClass as(Name alias) {
        return new EntryClass(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EntryClass rename(String name) {
        return new EntryClass(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EntryClass rename(Name name) {
        return new EntryClass(name, null);
    }
}
