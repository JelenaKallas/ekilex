/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.udt;


import eki.ekilex.data.db.Public;
import eki.ekilex.data.db.udt.records.TypeWordEtymRecord;

import javax.annotation.Generated;

import org.jooq.Schema;
import org.jooq.UDTField;
import org.jooq.impl.UDTImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TypeWordEtym extends UDTImpl<TypeWordEtymRecord> {

    private static final long serialVersionUID = 379711049;

    /**
     * The reference instance of <code>public.type_word_etym</code>
     */
    public static final TypeWordEtym TYPE_WORD_ETYM = new TypeWordEtym();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TypeWordEtymRecord> getRecordType() {
        return TypeWordEtymRecord.class;
    }

    /**
     * The attribute <code>public.type_word_etym.word_id</code>.
     */
    public static final UDTField<TypeWordEtymRecord, Long> WORD_ID = createField("word_id", org.jooq.impl.SQLDataType.BIGINT, TYPE_WORD_ETYM, "");

    /**
     * The attribute <code>public.type_word_etym.etym_word_id</code>.
     */
    public static final UDTField<TypeWordEtymRecord, Long> ETYM_WORD_ID = createField("etym_word_id", org.jooq.impl.SQLDataType.BIGINT, TYPE_WORD_ETYM, "");

    /**
     * The attribute <code>public.type_word_etym.etym_word</code>.
     */
    public static final UDTField<TypeWordEtymRecord, String> ETYM_WORD = createField("etym_word", org.jooq.impl.SQLDataType.CLOB, TYPE_WORD_ETYM, "");

    /**
     * The attribute <code>public.type_word_etym.etym_word_lang</code>.
     */
    public static final UDTField<TypeWordEtymRecord, String> ETYM_WORD_LANG = createField("etym_word_lang", org.jooq.impl.SQLDataType.CHAR(3), TYPE_WORD_ETYM, "");

    /**
     * The attribute <code>public.type_word_etym.etym_year</code>.
     */
    public static final UDTField<TypeWordEtymRecord, String> ETYM_YEAR = createField("etym_year", org.jooq.impl.SQLDataType.CLOB, TYPE_WORD_ETYM, "");

    /**
     * The attribute <code>public.type_word_etym.etym_meaning_words</code>.
     */
    public static final UDTField<TypeWordEtymRecord, String[]> ETYM_MEANING_WORDS = createField("etym_meaning_words", org.jooq.impl.SQLDataType.CLOB.getArrayDataType(), TYPE_WORD_ETYM, "");

    /**
     * The attribute <code>public.type_word_etym.etym_word_sources</code>.
     */
    public static final UDTField<TypeWordEtymRecord, String[]> ETYM_WORD_SOURCES = createField("etym_word_sources", org.jooq.impl.SQLDataType.CLOB.getArrayDataType(), TYPE_WORD_ETYM, "");

    /**
     * The attribute <code>public.type_word_etym.comments</code>.
     */
    public static final UDTField<TypeWordEtymRecord, String[]> COMMENTS = createField("comments", org.jooq.impl.SQLDataType.CLOB.getArrayDataType(), TYPE_WORD_ETYM, "");

    /**
     * The attribute <code>public.type_word_etym.is_questionable</code>.
     */
    public static final UDTField<TypeWordEtymRecord, Boolean> IS_QUESTIONABLE = createField("is_questionable", org.jooq.impl.SQLDataType.BOOLEAN, TYPE_WORD_ETYM, "");

    /**
     * The attribute <code>public.type_word_etym.is_compound</code>.
     */
    public static final UDTField<TypeWordEtymRecord, Boolean> IS_COMPOUND = createField("is_compound", org.jooq.impl.SQLDataType.BOOLEAN, TYPE_WORD_ETYM, "");

    /**
     * No further instances allowed
     */
    private TypeWordEtym() {
        super("type_word_etym", null, null, false);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }
}
